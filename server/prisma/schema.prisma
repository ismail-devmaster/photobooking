// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ---------- Enums ----------
enum Role {
  CLIENT
  PHOTOGRAPHER
  ADMIN
}

enum BookingState {
  draft
  requested
  pending_payment
  confirmed
  in_progress
  completed
  cancelled_by_client
  cancelled_by_photographer
  disputed
  refunded
}

enum PaymentStatus {
  PENDING
  REQUIRES_ACTION
  AUTHORIZED
  CAPTURED
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELED
}

enum ContractStatus {
  GENERATED
  SENT
  PARTIALLY_SIGNED
  SIGNED
  DECLINED
  VOID
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  SYSTEM
  BOOKING_REQUESTED
  BOOKING_CONFIRMED
  MESSAGE_RECEIVED
  CONTRACT_READY
  CONTRACT_SIGNED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  REVIEW_RECEIVED
}

/// ---------- Core Models ----------
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String?
  name            String?
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  role            Role      @default(CLIENT)
  locale          String    @default("en")
  phone           String?
  disabled        Boolean   @default(false)   
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  photographer       Photographer?
  oauthAccounts      OAuthAccount[]
  refreshTokens      RefreshToken[]
  emailVerifications EmailVerification[]
  bookingsAsClient   Booking[]           @relation("ClientBookings")
  conversationsA     Conversation[]      @relation("ConversationsA")
  conversationsB     Conversation[]      @relation("ConversationsB")
  messages           Message[]
  notifications      Notification[]
  reviews            Review[]
  favorites          Favorite[]
  stateId            String? // nullable - user may not set state
  state              State?              @relation("UserState", fields: [stateId], references: [id])
  createdCalendarEvents CalendarEvent[] @relation("CalendarEventCreatedBy")

  @@index([email])
  @@index([role])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String // store sha256 hex of token
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model OAuthAccount {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model RefreshToken {
  id           String   @id @default(cuid())
  tokenHash    String // hash of the token (sha256 hex) or similar
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  replacedById String? // id of token that replaced this
  revoked      Boolean  @default(false)

  @@index([userId])
  @@index([expiresAt])
}

model Photographer {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  location      Json? // {lat, lon, address}
  tags          String[] @default([]) // styles/equipment keywords
  priceBaseline Int
  verified      Boolean  @default(false)
  ratingAvg     Float    @default(0)
  ratingCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  portfolios Portfolio[]
  bookings   Booking[]   @relation("PhotographerBookings")
  reviews    Review[]
  favorites  Favorite[]
  stateId    String? // photographer location state
  state      State?      @relation("PhotographerState", fields: [stateId], references: [id])

  // services relation (many-to-many)
  services Service[]

  // packages and gallery images
  packages      Package[]
  galleryImages GalleryImage[]
  calendarEvents CalendarEvent[]

  @@index([verified, ratingAvg])
  @@index([priceBaseline])
}

model Portfolio {
  id             String       @id @default(cuid())
  photographerId String
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  images Image[]

  @@index([photographerId])
}

model Image {
  id          String   @id @default(cuid())
  portfolioId String
  url         String
  meta        Json?
  createdAt   DateTime @default(now())

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Booking {
  id             String       @id @default(cuid())
  clientId       String
  photographerId String
  startAt        DateTime
  endAt          DateTime
  location       Json? // {address, lat, lon}
  priceCents     Int
  state          BookingState @default(requested)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  client       User                  @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  photographer Photographer          @relation("PhotographerBookings", fields: [photographerId], references: [id], onDelete: Cascade)
  contract     Contract?
  payment      Payment?
  review       Review?
  stateHistory BookingStateHistory[]

  @@index([photographerId, startAt])
  @@index([clientId, state])
  @@index([createdAt])
}

model BookingStateHistory {
  id        String       @id @default(cuid())
  bookingId String
  fromState BookingState
  toState   BookingState
  reason    String?
  byUserId  String?
  createdAt DateTime     @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId, createdAt])
}

model Contract {
  id          String         @id @default(cuid())
  bookingId   String         @unique
  status      ContractStatus
  pdfUrl      String
  providerRef String?
  signedAt    DateTime?
  createdAt   DateTime       @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Payment {
  id                      String        @id @default(cuid())
  bookingId               String        @unique
  status                  PaymentStatus @default(PENDING)
  amountCents             Int
  currency                String        @default("USD")
  provider                String // e.g., "stripe"
  providerPaymentIntentId String?
  receiptUrl              String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
}

model Conversation {
  id             String   @id @default(cuid())
  participantAId String
  participantBId String
  lastActiveAt   DateTime @default(now())

  participantA User      @relation("ConversationsA", fields: [participantAId], references: [id], onDelete: Cascade)
  participantB User      @relation("ConversationsB", fields: [participantBId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([participantAId, participantBId])
  @@index([lastActiveAt])
}

model Message {
  id             String    @id @default(cuid())
  conversationId String
  senderId       String
  content        String?
  attachments    Json?
  readAt         DateTime?
  createdAt      DateTime  @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
}

model Review {
  id             String       @id @default(cuid())
  bookingId      String       @unique
  photographerId String
  reviewerId     String
  rating         Int
  text           String?
  status         ReviewStatus @default(PENDING)
  createdAt      DateTime     @default(now())

  booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  reviewer     User         @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([reviewerId])
  @@index([photographerId])
  @@index([status, createdAt])
}

model Favorite {
  id             String   @id @default(cuid())
  userId         String
  photographerId String
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)

  @@unique([userId, photographerId])
  @@index([userId])
  @@index([photographerId])
}

model Package {
  id             String   @id @default(cuid())
  photographerId String
  title          String
  description    String?
  priceCents     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)

  @@index([photographerId])
}

model GalleryImage {
  id             String   @id @default(cuid())
  photographerId String
  url            String
  meta           Json?
  createdAt      DateTime @default(now())

  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)

  @@index([photographerId])
}

model CalendarEvent {
  id             String   @id @default(cuid())
  photographerId String
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  startAt        DateTime
  endAt          DateTime
  title          String?    // e.g., "Holiday", "Booked - Wedding", "Blocked"
  type           String     @default("blocked") // "blocked"|"available"|"note" (mostly "blocked")
  createdById    String?    // optional user who created the block (photographer)
  createdBy      User?      @relation("CalendarEventCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([photographerId, startAt])
  @@index([startAt, endAt])
}


model State {
  id        String   @id @default(cuid())
  code      String   @unique // e.g. "DZ-16" or short code
  name      String
  createdAt DateTime @default(now())

  users         User[]         @relation("UserState")
  photographers Photographer[] @relation("PhotographerState")

  @@index([code])
  @@index([name])
}

model Service {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
    categoryId  String?       
      category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())

  photographers Photographer[] // many-to-many implicit relation

  @@index([slug])
  @@index([name])
}
model Category {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())

  services Service[]

  @@index([slug])
  @@index([name])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readAt])
  @@index([type, createdAt])
}
